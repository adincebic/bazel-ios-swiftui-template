load("@bazel_sonarqube//:defs.bzl", "sonarqube")

sonarqube(
    name = "sonarqube",
    srcs = [
        "//app:srcs",
    ],
    test_reports = [ ":test_reports" ],
    test_srcs = [],
    coverage_report = ":coverage_report",
    project_key = "com.example.separate:separate",
    project_name = "My Project with Separate sonarqube rule",
    scm_info = [":git"],
    tags = ["manual"],
    testonly = True,
)

filegroup(
    name = "git",
    srcs = glob(
        [".git/**"],
        exclude = [".git/**/*[*"],  # gitk creates temp files with []
    ),
    tags = ["manual"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "coverage_report",
    srcs = ["bazel-out/_coverage/_coverage_report.dat"],  # Created manually
    tags = ["manual"],
    visibility = ["//visibility:public"],
)

filegroup(
    name = "test_reports",
    srcs = glob(["bazel-testlogs/**/test.xml"]),  # Created manually
    tags = ["manual"],
    visibility = ["//visibility:public"],
)

load(
    "@rules_xcodeproj//xcodeproj:defs.bzl",
    "top_level_target",
    "xcodeproj",
)

# Xcode

xcodeproj(
    name = "xcodeproj",
    project_name = "App",
    top_level_targets = [
        top_level_target(
            "//app",
            target_environments = ["simulator"],
        ),
        top_level_target(
            "//modules/API:APITests",
            target_environments = ["simulator"],
        ),
        top_level_target(
            "//modules/Models:ModelsTests",
            target_environments = ["simulator"],
        ),
    ],
)

# tools

genrule(
    name = "lint",
    srcs = [],
    outs = ["lint.sh"],
    cmd = """
echo "set -e" > "$@"
echo "./$(location @buildifier_prebuilt//:buildifier) -lint fix -mode fix -r \\$$BUILD_WORKSPACE_DIRECTORY" >> "$@"
echo "./$(location @SwiftLint//:swiftlint) --fix \\$$BUILD_WORKSPACE_DIRECTORY" >> "$@"
""",
    executable = True,
    tools = [
        "@SwiftLint//:swiftlint",
        "@buildifier_prebuilt//:buildifier",
    ],
)
